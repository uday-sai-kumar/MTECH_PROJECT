import pandas as pd
from malware_set import MalwareSet as ms
import os
from create_data_frame import CreateDataFrame as cdf
from read_file import ReadFile as rf
import feature_selection
from sklearn.model_selection import train_test_split
import train_data
import time

def _start():

    file_path = '/Users/udaysaikumar/Documents/THESIS/CODES/DATASET/feature_vectors'
    all_files = os.listdir(file_path)
    data_set = []
    _set = ms.read_malware_files()
    dependent_column = []
    count = 0
    for _file in all_files:
        count = count+1
        _file_content = rf.read_file(file_path+'/'+_file)
        data_set.append(_file_content)
        if _file in _set:
            dependent_column.append(1)
        else:
            dependent_column.append(0)

    X = cdf.create_data_frame(data_set)
    y = cdf.create_data_frame(dependent_column)
    _data = pd.concat([X,y],axis=1)
    a = ['f' + str(i) for i in range(1, 9)]
    a.append('m_or_b')
    _data.columns = a
   # print(_data.tail(30))
    _data.to_csv('_feature_vectors.csv', index=False)

def _feature_selection():
    a = ['f' + str(i) for i in range(1, 9)]
    _data = pd.read_csv('_feature_vectors.csv')
    print("Select K Best:")
    feature_selection.select_k_best(_data)
    print("Extra Tree Classifier:")
    feature_selection.extree_tree_classifier(_data)
    print("Recursive Feature Elimination:")
    feature_selection.recursive_feature_elimination(_data)
    print("Select From Model:")
    feature_selection.select_from_model(_data)

    ##########################
def __start():
    a = ['f' + str(i) for i in range(1, 9)]
    _data = pd.read_csv('_feature_vectors.csv')
    # print("Select K Best")
    # feature_selection.select_k_best(_data)
    # print("Extra Tree Classifier")
    # feature_selection.extree_tree_classifier(_data)
    # print("Recursive Feature Elimination")
    # feature_selection.recursive_feature_elimination(_data)
    # print("Select From Model")
    # feature_selection.select_from_model(_data)

    ##########################

    X_train, X_test, y_train, y_test = train_test_split(_data[a], _data['m_or_b'], test_size=0.40, random_state=42)
    print("FULL DATASET")
    start_of_time = time.time()
    train_data.linear_SVC(X_train, X_test, y_train, y_test)

    end_of_time = time.time()
    print("time taken is ", (end_of_time - start_of_time), ' sec')

    print("####################################")
    start_of_time = time.time()
    train_data.SVC_model(X_train, X_test, y_train, y_test)

    end_of_time = time.time()
    print("time taken is ", (end_of_time - start_of_time), ' sec')

    print("####################################")
    start_of_time = time.time()
    train_data.GaussianNB_model(X_train, X_test, y_train, y_test)

    end_of_time = time.time()
    print("time taken is ", (end_of_time - start_of_time), ' sec')

    print("####################################")

    start_of_time = time.time()
    train_data.decison_tree(X_train, X_test, y_train, y_test)

    end_of_time = time.time()
    print("time taken is ", (end_of_time-start_of_time),' sec')

    print("####################################")

def __start_group():
    a = ['f' + str(i) for i in range(1, 9)]
    for i in range(1, 7):
        _data = pd.read_csv('_feature_vectors_'+str(i)+'.csv')
        print("DATASET - "+str(i))
        X_train, X_test, y_train, y_test = train_test_split(_data[a], _data['m_or_b'], test_size=0.40, random_state=42)

        start_of_time = time.time()
        train_data.linear_SVC(X_train, X_test, y_train, y_test)

        end_of_time = time.time()
        print("time taken is ", (end_of_time - start_of_time), ' sec')

        print("####################################")
        start_of_time = time.time()
        train_data.SVC_model(X_train, X_test, y_train, y_test)

        end_of_time = time.time()
        print("time taken is ", (end_of_time - start_of_time), ' sec')

        print("####################################")
        start_of_time = time.time()
        train_data.GaussianNB_model(X_train, X_test, y_train, y_test)

        end_of_time = time.time()
        print("time taken is ", (end_of_time - start_of_time), ' sec')

        print("####################################")

        start_of_time = time.time()
        train_data.decison_tree(X_train, X_test, y_train, y_test)

        end_of_time = time.time()
        print("time taken is ", (end_of_time - start_of_time), ' sec')

        print("####################################")


    # print("Select K Best")
    # feature_selection.select_k_best(_data)
    # print("Extra Tree Classifier")
    # feature_selection.extree_tree_classifier(_data)
    # print("Recursive Feature Elimination")
    # feature_selection.recursive_feature_elimination(_data)
    # print("Select From Model")
    # feature_selection.select_from_model(_data)

    ##########################

    #train_data.linear_SVC(X_train, X_test, y_train, y_test)
    #train_data.SVC_model(X_train, X_test, y_train, y_test)
    #train_data.GaussianNB_model(X_train, X_test, y_train, y_test)

    # start_of_time = time.time()
    # train_data.decison_tree(X_train, X_test, y_train, y_test)
    #
    # end_of_time = time.time()
    # print("time taken is ", (end_of_time-start_of_time),' sec')


def _save_data(_data,_data_one, i):
    _data = pd.concat([_data, _data_one], axis=0)
    _data.to_csv('_feature_vectors_'+str(i)+'.csv', index=False)


def _split_data():
    df = pd.read_csv('_feature_vectors.csv')
    _group = df.groupby('m_or_b')
    group_zero = _group.get_group(0)
    group_one = _group.get_group(1)
    _group_1 = group_zero[:20000:]
    _group_2 = group_zero[20000:40000:]
    _group_3 = group_zero[40000:60000:]
    _group_4 = group_zero[60000:80000:]
    _group_5 = group_zero[80000:100000:]
    _group_6 = group_zero[100000::]
    _save_data(_group_1, group_one, 1)
    _save_data(_group_2, group_one, 2)
    _save_data(_group_3, group_one, 3)
    _save_data(_group_4, group_one, 4)
    _save_data(_group_5, group_one, 5)
    _save_data(_group_6, group_one, 6)
    #
    # _group_1.to_csv('_feature_vectors_1.csv', index=False)
    # _group_2.to_csv('_feature_vectors_2.csv', index=False)
    # _group_3.to_csv('_feature_vectors_3.csv', index=False)
    # _group_4.to_csv('_feature_vectors_4.csv', index=False)
    # _group_5.to_csv('_feature_vectors_5.csv', index=False)
    # _group_6.to_csv('_feature_vectors_6.csv', index=False)
    # for name, group in _group:
    #     print(name)
    #     print(group)
    #     print()


#_start()

#_feature_selection()

#__start()


#_split_data()

__start_group()

